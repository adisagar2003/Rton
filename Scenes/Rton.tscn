[gd_scene load_steps=17 format=3 uid="uid://ci82aii7lfwk3"]

[ext_resource type="Texture2D" uid="uid://bj3odikpci6g6" path="res://Scenes/main-char.png" id="1_md4u1"]
[ext_resource type="Script" path="res://Scenes/trail.gd" id="2_5xuv2"]

[sub_resource type="GDScript" id="GDScript_3fylj"]
script/source = "extends CharacterBody2D


@export var SPEED = 150.0;
@export var VERTICAL_SPEED = 50.0;
const JUMP_VELOCITY = -400.0

enum States {Idle, Running, Attacking, Hurt};
enum FacingDirection {Left, Right};
var state_names = {
	States.Idle: \"Idle\",
	States.Running: \"Running\",
	States.Attacking: \"Attacking\",
	States.Hurt: \"Hurt\"
}

var state = States.Idle;
var facingDirection = FacingDirection.Left;
func _physics_process(delta: float) -> void:
	# Add the gravity.
	#if not is_on_floor():
		#velocity += get_gravity() * delta
	HandleInputMovement();
	HandleSpriteFlip();
	AnimHandle();
	HandleAttack();
	print(velocity.normalized().length());
	# Handle jump.
	#if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
	#velocity.y = JUMP_VELOCITY
	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	move_and_slide();
		
func HandleSpriteFlip():
	var direction := Input.get_axis(\"ui_left\", \"ui_right\");
	if (direction < 0):
		facingDirection = FacingDirection.Left;
		$AnimatedSprite2D.flip_h = false;
	if (direction > 0):
		facingDirection = FacingDirection.Right;
		$AnimatedSprite2D.flip_h = true;
	if (direction == 0):
		$AnimatedSprite2D.flip_h = $AnimatedSprite2D.flip_h;
	
func AnimHandle():
	if (state == States.Idle):
		$AnimatedSprite2D.play(\"Idle\");
	if (state == States.Running):
		$AnimatedSprite2D.play(\"Run\");
	if (state == States.Attacking):
		$AnimatedSprite2D.play(\"attack\");

func HandleAttack():
	if Input.is_action_just_pressed(\"Attack\"):
		if (state == States.Attacking):
			pass
		#Dash in specified direction
		
		else:
			state = States.Attacking;
			if (facingDirection == FacingDirection.Left):
				velocity.x += SPEED*10* -1;
				pass
			if (facingDirection == FacingDirection.Right):
				velocity.x += SPEED*10;
				pass
			$AttackCooldown.start();
			set_process_input(false);
		
func StopAttack():
	pass

func HandleInputMovement():
	
	var direction := Input.get_axis(\"ui_left\", \"ui_right\");
	var verticalDirection := Input.get_axis(\"ui_up\", \"ui_down\");
	if verticalDirection:
		velocity.y = verticalDirection;
	else:
		velocity.y = move_toward(velocity.y, 0, SPEED);
	if direction:
		velocity.x = direction;
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED);
		if (state !=States.Attacking):
			state = States.Idle;
			
	# NORMALIZE VELOCITY
	velocity = velocity.normalized() * SPEED;
	#Handle states
	if (velocity != Vector2.ZERO and state != States.Attacking):
		state = States.Running;
	
	# handle when pressing both buttons, reduce the speed a lil.
	
		
func _on_timer_timeout() -> void:
	state = States.Idle;
	pass # Replace with function body.
"

[sub_resource type="AtlasTexture" id="AtlasTexture_vl742"]
atlas = ExtResource("1_md4u1")
region = Rect2(0, 0, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_pl7cx"]
atlas = ExtResource("1_md4u1")
region = Rect2(8, 0, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_udhne"]
atlas = ExtResource("1_md4u1")
region = Rect2(16, 0, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_6bbpv"]
atlas = ExtResource("1_md4u1")
region = Rect2(0, 8, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_0yig4"]
atlas = ExtResource("1_md4u1")
region = Rect2(8, 8, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_p04th"]
atlas = ExtResource("1_md4u1")
region = Rect2(16, 8, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_3yj6o"]
atlas = ExtResource("1_md4u1")
region = Rect2(0, 16, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_jqf7c"]
atlas = ExtResource("1_md4u1")
region = Rect2(8, 16, 8, 8)

[sub_resource type="AtlasTexture" id="AtlasTexture_sofad"]
atlas = ExtResource("1_md4u1")
region = Rect2(16, 16, 8, 8)

[sub_resource type="SpriteFrames" id="SpriteFrames_jv7t3"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pl7cx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}],
"loop": true,
"name": &"Idle",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_udhne")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6bbpv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0yig4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}],
"loop": true,
"name": &"Run",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vl742")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_p04th")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3yj6o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jqf7c")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_sofad")
}],
"loop": true,
"name": &"attack",
"speed": 15.0
}]

[sub_resource type="Animation" id="Animation_0aact"]
resource_name = "Attack"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimatedSprite2D:sprite_frames")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(),
"transitions": PackedFloat32Array(),
"update": 1,
"values": []
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_6swys"]
_data = {
"Attack": SubResource("Animation_0aact")
}

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_v0pb8"]
radius = 4.0
height = 10.0

[node name="Rton" type="CharacterBody2D"]
script = SubResource("GDScript_3fylj")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
texture_filter = 1
sprite_frames = SubResource("SpriteFrames_jv7t3")
animation = &"attack"
frame = 3
frame_progress = 0.563539
metadata/_aseprite_wizard_interface_config_ = {
"layer_section": true,
"pending_changes": {}
}
metadata/_aseprite_wizard_config_ = {
"layers": [],
"o_ex_p": "",
"o_folder": "",
"o_name": "",
"only_visible": false,
"should_round_fps": true,
"slice": "",
"source": "res://Assets/Aesprite/main-char.aseprite"
}
metadata/_aseprite_wizard_source_file_hash_ = "c1d1f22dfdf3413cdbe2b39fc6a64906"

[node name="AnimationPlayer" type="AnimationPlayer" parent="AnimatedSprite2D"]
root_node = NodePath("../..")
libraries = {
"": SubResource("AnimationLibrary_6swys")
}

[node name="Trail" type="Line2D" parent="AnimatedSprite2D"]
top_level = true
width = 6.0
default_color = Color(0.896449, 0, 0.233837, 1)
script = ExtResource("2_5xuv2")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_v0pb8")

[node name="AttackCooldown" type="Timer" parent="."]
wait_time = 0.7
one_shot = true

[connection signal="timeout" from="AttackCooldown" to="." method="_on_timer_timeout"]
